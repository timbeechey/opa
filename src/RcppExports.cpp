// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// conform
NumericVector conform(NumericVector xs, NumericVector h);
RcppExport SEXP _opa_conform(SEXP xsSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(conform(xs, h));
    return rcpp_result_gen;
END_RCPP
}
// sign_with_threshold
IntegerVector sign_with_threshold(NumericVector xs, double diff_threshold);
RcppExport SEXP _opa_sign_with_threshold(SEXP xsSEXP, SEXP diff_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< double >::type diff_threshold(diff_thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(sign_with_threshold(xs, diff_threshold));
    return rcpp_result_gen;
END_RCPP
}
// all_diffs
NumericVector all_diffs(NumericVector xs);
RcppExport SEXP _opa_all_diffs(SEXP xsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xs(xsSEXP);
    rcpp_result_gen = Rcpp::wrap(all_diffs(xs));
    return rcpp_result_gen;
END_RCPP
}
// ordering
IntegerVector ordering(NumericVector xs, String pairing_type, float diff_threshold);
RcppExport SEXP _opa_ordering(SEXP xsSEXP, SEXP pairing_typeSEXP, SEXP diff_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< String >::type pairing_type(pairing_typeSEXP);
    Rcpp::traits::input_parameter< float >::type diff_threshold(diff_thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(ordering(xs, pairing_type, diff_threshold));
    return rcpp_result_gen;
END_RCPP
}
// row_pcc
List row_pcc(NumericVector xs, NumericVector h, String pairing_type, double diff_threshold);
RcppExport SEXP _opa_row_pcc(SEXP xsSEXP, SEXP hSEXP, SEXP pairing_typeSEXP, SEXP diff_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< String >::type pairing_type(pairing_typeSEXP);
    Rcpp::traits::input_parameter< double >::type diff_threshold(diff_thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(row_pcc(xs, h, pairing_type, diff_threshold));
    return rcpp_result_gen;
END_RCPP
}
// pcc
List pcc(NumericMatrix dat, NumericVector h, String pairing_type, double diff_threshold);
RcppExport SEXP _opa_pcc(SEXP datSEXP, SEXP hSEXP, SEXP pairing_typeSEXP, SEXP diff_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< String >::type pairing_type(pairing_typeSEXP);
    Rcpp::traits::input_parameter< double >::type diff_threshold(diff_thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(pcc(dat, h, pairing_type, diff_threshold));
    return rcpp_result_gen;
END_RCPP
}
// calc_cvalues
List calc_cvalues(List pcc_out, int nreps);
RcppExport SEXP _opa_calc_cvalues(SEXP pcc_outSEXP, SEXP nrepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pcc_out(pcc_outSEXP);
    Rcpp::traits::input_parameter< int >::type nreps(nrepsSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_cvalues(pcc_out, nreps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_opa_conform", (DL_FUNC) &_opa_conform, 2},
    {"_opa_sign_with_threshold", (DL_FUNC) &_opa_sign_with_threshold, 2},
    {"_opa_all_diffs", (DL_FUNC) &_opa_all_diffs, 1},
    {"_opa_ordering", (DL_FUNC) &_opa_ordering, 3},
    {"_opa_row_pcc", (DL_FUNC) &_opa_row_pcc, 4},
    {"_opa_pcc", (DL_FUNC) &_opa_pcc, 4},
    {"_opa_calc_cvalues", (DL_FUNC) &_opa_calc_cvalues, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_opa(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
